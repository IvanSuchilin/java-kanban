1.реализовать функциональность так, чтобы время просмотра задачи никак не зависело от общего количества задач в истории.
2. в интерфейс HistoryManager добавить метод void remove(int id)
3. Реадизовать метод remove В InMemoryHistoryManager
4. Добавьте вызов remove при удалении задач, чтобы они также удалялись из истории просмотров


5. Программа должна запоминать порядок вызовов метода add c использованием CustomLinkedList
    5.1 Если какая-либо задача просматривалась несколько раз, в истории должен отобразиться только последний просмотр,
    а предыдущий удален за O(1);
    5.2 CustomLinkedList позволяет удалить элемент из произвольного места за О(1) с одним важным условием — если программа
     уже дошла до этого места по списку. Чтобы выполнить условие, создайте стандартную HashMap.
     Её ключом будет id задачи, просмотр которой требуется удалить, а значением — место просмотра этой задачи в списке,
     то есть узел связного списка. С помощью номера задачи можно получить соответствующий ему узел связного списка и удалить его.
        Реализация метода getHistory должна перекладывать задачи из связного списка в ArrayList для формирования ответа.
        5.3 написать реализацию метода add(Task task) с использованием HashMap и removeNode
        ( удалять задачу из списка, если она там есть, а затем вставлять её в конец двусвязного списка.
        После добавления задачи не забудьте обновить значение узла в HashMap)


6. CustomLinkedList (в InMemoryHistoryManager)
    6.1 написать реализацию двусвязного списка задач с методами linkLast и getTasks (сбор всех задач в ArrayList)
    6.2 создать отдельный класс Node для узла списка
    6.3 в классе Node создать removeNode(Node nodeForDelete) - вырезать узел